/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  fragment RandomBox on RandomBox {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n  }\n": types.RandomBoxFragmentDoc,
    "\n  fragment DroppedBy on Drop {\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n  }\n": types.DroppedByFragmentDoc,
    "\n  fragment DropsList_Fragment on Drop {\n    quantity\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n": types.DropsList_FragmentFragmentDoc,
    "\n  fragment DropsListMoney_Fragment on Money {\n    min\n    max\n  }\n": types.DropsListMoney_FragmentFragmentDoc,
    "\n  fragment Card_ItemlistItem on ItemList {\n    code\n    name\n    icon\n    grade\n    tablename\n    gender\n    duration\n    level_land\n    level_sea\n    ...CharacterClassFragment\n    ...ShipClassFragment\n    ...EffectsFragment\n  }\n": types.Card_ItemlistItemFragmentDoc,
    "\n  fragment ItemBase on BaseMixin {\n    code\n    name\n    icon\n    grade\n    duration\n    stack_size\n    npc_buy_price\n    npc_sell_price\n    is_tradable\n    is_storageable\n    is_destroyable\n    is_sellable\n  }\n": types.ItemBaseFragmentDoc,
    "\n  fragment ItemSetCard on ItemSetMixin {\n    item_set {\n      name\n      items {\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n      ...EffectsFragment\n    }\n  }\n": types.ItemSetCardFragmentDoc,
    "\n  fragment NeededFor on RecipeProduction {\n    ...ProducedBy\n  }\n": types.NeededForFragmentDoc,
    "\n  fragment NPCStoreItemlist_Fragment on NpcStoreItem {\n    section_name\n    page_name\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n": types.NpcStoreItemlist_FragmentFragmentDoc,
    "\n  fragment ProducedBy on RecipeProduction {\n    __typename\n    ... on Recipe {\n      code\n      name\n      icon\n      grade\n    }\n    ... on Production {\n      code\n      result_item {\n        code\n        name\n        icon\n        grade\n        duration\n      }\n    }\n  }\n": types.ProducedByFragmentDoc,
    "\n  fragment QuestMission on QuestMission {\n    work_type\n    count\n    description\n\n    item {\n      ...Card_ItemlistItem\n    }\n\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n\n    quest_item {\n      code\n      name\n      icon\n      grade\n    }\n\n    map {\n      code\n      name\n    }\n\n    npc {\n      ...SoldByNPC\n    }\n  }\n": types.QuestMissionFragmentDoc,
    "\n  fragment QuestGiveItem on QuestGiveItem {\n    amount\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n": types.QuestGiveItemFragmentDoc,
    "\n  fragment QuestMissions on Quest {\n    missions {\n      ...QuestMission\n    }\n    give_items {\n      ...QuestGiveItem\n    }\n  }\n": types.QuestMissionsFragmentDoc,
    "\n  fragment QuestRewardEdge on QuestRewardItem {\n    amount\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n": types.QuestRewardEdgeFragmentDoc,
    "\n  fragment QuestsList_Fragment on Quest {\n    code\n    title\n    level\n    is_sea\n    is_noble\n    is_saint\n    is_mercenary\n    is_explorer\n  }\n": types.QuestsList_FragmentFragmentDoc,
    "\n  fragment ShipDetails on ShipBaseMixin {\n    guns_front\n    guns_side\n    crew_size\n    physical_defense\n    protection\n    balance\n    dp\n    en\n    en_usage\n    en_recovery\n    acceleration\n    deceleration\n    turning_power\n    favorable_wind\n    adverse_wind\n    physical_damage\n    weapon_range\n    critical_chance\n    reload_speed\n    hit_range\n  }\n": types.ShipDetailsFragmentDoc,
    "\n  fragment SkillsCard_Fragment on SkillMixin {\n    name\n    description\n    icon\n    required_level_land\n    required_level_sea\n    cast_time\n    cooldown\n  }\n": types.SkillsCard_FragmentFragmentDoc,
    "\n  fragment SoldByNPC on Npc {\n    code\n    name\n    icon\n    grade\n    level\n    is_sea\n    positions {\n      map {\n        name\n      }\n    }\n  }\n": types.SoldByNpcFragmentDoc,
    "\n  fragment UpgradeRule on UpgradeRule {\n    level\n    cost\n    ...EffectsFragment\n  }\n": types.UpgradeRuleFragmentDoc,
    "\n  fragment WeaponUpgradeRule on WeaponMixin {\n    upgrade_rule {\n      ...UpgradeRule\n    }\n  }\n": types.WeaponUpgradeRuleFragmentDoc,
    "\n  query GlobalSearch($s: String!) {\n    search(s: $s, limit: 15) {\n      __typename\n      ... on ActorMixin {\n        code\n        name\n        icon\n        actorGrade: grade\n        level\n        is_sea\n      }\n      ... on ItemList {\n        code\n        name\n        icon\n        tablename\n        duration\n        gender\n        level_land\n        level_sea\n        itemGrade: grade\n        # ...EffectsFragment\n        ...CharacterClassFragment\n        ...ShipClassFragment\n      }\n      ... on Quest {\n        code\n        title\n        level\n        is_sea\n      }\n    }\n  }\n": types.GlobalSearchDocument,
    "\n  fragment MapCanvas_MonsterPositionFragment on MonsterPosition {\n    __typename\n    index\n    amount\n    respawn_time\n    x\n    y\n    # z\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      # is_sea\n    }\n  }\n": types.MapCanvas_MonsterPositionFragmentFragmentDoc,
    "\n  fragment MapCanvas_NPCPositionFragment on NpcPosition {\n    __typename\n    index\n    x\n    y\n    # z\n    npc {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n  }\n": types.MapCanvas_NpcPositionFragmentFragmentDoc,
    "\n  fragment MapCanvas_MapDetailsFragment on Map {\n    code\n    name\n\n    top\n    left\n    width\n    height\n  }\n": types.MapCanvas_MapDetailsFragmentFragmentDoc,
    "\n  fragment ModelFragment on Available3DModel {\n    asset_path\n    animation_name\n    character_class\n    gender\n  }\n": types.ModelFragmentFragmentDoc,
    "\n  fragment PlannerPlayerSkillClassFlags on PlayerSkill {\n    is_explorer\n    is_sniper\n    is_excavator\n\n    is_noble\n    is_court_magician\n    is_magic_knight\n\n    is_saint\n    is_shaman\n    is_priest\n\n    is_mercenary\n    is_gladiator\n    is_guardian_swordsman\n\n    is_torpedo\n    is_armored\n    is_assault\n    is_big_gun\n    is_maintenance\n  }\n": types.PlannerPlayerSkillClassFlagsFragmentDoc,
    "\n  fragment PlannerPlayerSkill on PlayerSkill {\n    code\n    reference_code\n    icon\n    name\n    skill_level\n    skill_max_level\n    required_level_land\n    required_level_sea\n    mana_cost\n    cast_distance\n    cast_time\n    effect_range\n    cooldown\n    description\n    required_weapons\n    ...PlannerPlayerSkillClassFlags\n\n    required_skills {\n      required_skill_code\n    }\n  }\n": types.PlannerPlayerSkillFragmentDoc,
    "\n  fragment PlayerLevelData on PlayerLevelStat {\n    level\n    max_hp\n    max_mp\n    avoidance\n\n    range_min_attack\n    range_max_attack\n    range_hitrate\n    range_critical_rate\n\n    magic_min_attack\n    magic_max_attack\n    magic_hitrate\n    magic_critical_rate\n\n    melee_min_attack\n    melee_max_attack\n    melee_hitrate\n    melee_critical_rate\n  }\n": types.PlayerLevelDataFragmentDoc,
    "\n  fragment PlayerStatsData on PlayerStatusStat {\n    point_level\n    stat_type\n\n    max_hp_increment\n    max_mp_increment\n    avoidance_increment\n\n    range_min_attack_increment\n    range_max_attack_increment\n    range_hitrate_increment\n    range_critical_rate_increment\n\n    magic_min_attack_increment\n    magic_max_attack_increment\n    magic_hitrate_increment\n    magic_critical_rate_increment\n\n    melee_min_attack_increment\n    melee_max_attack_increment\n    melee_hitrate_increment\n    melee_critical_rate_increment\n  }\n": types.PlayerStatsDataFragmentDoc,
    "\n  fragment CharacterClassFragment on ClassLandMixin {\n    is_noble\n    is_magic_knight\n    is_court_magician\n\n    is_mercenary\n    is_gladiator\n    is_guardian_swordsman\n\n    is_explorer\n    is_excavator\n    is_sniper\n\n    is_saint\n    is_priest\n    is_shaman\n  }\n": types.CharacterClassFragmentFragmentDoc,
    "\n  fragment EffectFragment on Effect {\n    effect_code\n    operator\n    value\n  }\n": types.EffectFragmentFragmentDoc,
    "\n  fragment EffectsFragment on EffectMixin {\n    effects {\n      ...EffectFragment\n    }\n  }\n": types.EffectsFragmentFragmentDoc,
    "\n  fragment ShipClassFragment on ClassSeaMixin {\n    is_armored\n    is_big_gun\n    is_assault\n    is_torpedo\n    is_maintenance\n  }\n": types.ShipClassFragmentFragmentDoc,
    "\n  query MonstersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: MonsterFilter\n    $order_by: [MonsterSort!]\n  ) {\n    all_monsters(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level\n        is_sea\n        grade\n      }\n    }\n  }\n": types.MonstersPaginationDocument,
    "\n  query MonsterDetailed($code: String!) {\n    monster(code: $code) {\n      code\n      name\n      icon\n      grade\n      is_sea\n      level\n      health_points\n      physical_defense\n      magical_defense\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      is_ranged\n      attack_range\n      experience\n      is_tameable\n      attack_vision_range\n      nearby_attack_vision_range\n\n      # TODO: definitely have to change that so it's a 1:n relationship.. :)\n      skill_1 {\n        ...SkillsCard_Fragment\n      }\n      skill_2 {\n        ...SkillsCard_Fragment\n      }\n\n      models {\n        ...ModelFragment\n      }\n\n      drops {\n        ...DropsList_Fragment\n      }\n\n      money {\n        ...DropsListMoney_Fragment\n      }\n\n      positions {\n        map_code\n        ...MapCanvas_MonsterPositionFragment\n      }\n    }\n\n    # less data queried instead of asking for map data on each positions edge\n    maps: all_maps(limit: -1, filter: {monsters: {monster_code: {eq: $code}}}) {\n      items {\n        ...MapCanvas_MapDetailsFragment\n      }\n    }\n\n    quests: all_quests(\n      limit: -1\n      filter: {missions: {monster_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n": types.MonsterDetailedDocument,
    "\n  query NPCsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: NpcFilter\n    $order_by: [NpcSort!]\n  ) {\n    all_npcs(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level\n        is_sea\n        grade\n      }\n    }\n  }\n": types.NpCsPaginationDocument,
    "\n  query NPCDetailed($code: String!) {\n    npc(code: $code) {\n      code\n      name\n      icon\n      grade\n      is_sea\n      level\n      health_points\n\n      models {\n        ...ModelFragment\n      }\n\n      positions {\n        map_code\n        ...MapCanvas_NPCPositionFragment\n      }\n\n      store_items {\n        ...NPCStoreItemlist_Fragment\n      }\n    }\n\n    # less data queried instead of asking for map data on each positions edge\n    maps: all_maps(limit: -1, filter: {npcs: {npc_code: {eq: $code}}}) {\n      items {\n        ...MapCanvas_MapDetailsFragment\n      }\n    }\n\n    quests: all_quests(limit: -1, filter: {start_npc_code: {eq: $code}}) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n": types.NpcDetailedDocument,
    "\n  query MaterialPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: MaterialFilter\n    $order_by: [MaterialSort!]\n  ) {\n    all_materials(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.MaterialPaginationDocument,
    "\n  query MaterialDetailed($code: String!) {\n    material(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.MaterialDetailedDocument,
    "\n  query ProductionPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ProductionFilter\n    $order_by: [ProductionSort!]\n  ) {\n    all_productions(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        type\n        points_required\n        result_quantity\n        result_item {\n          name\n          icon\n          grade\n          level_land\n          level_sea\n          duration\n          gender\n          ...CharacterClassFragment\n          ...EffectsFragment\n        }\n      }\n    }\n  }\n": types.ProductionPaginationDocument,
    "\n  query ProductionDetailed($code: String!) {\n    production(code: $code) {\n      points_required\n      type\n\n      result_quantity\n      result_item {\n        ...Card_ItemlistItem\n      }\n\n      required_materials {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n  }\n": types.ProductionDetailedDocument,
    "\n  query ProductionBookPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ProductionBookFilter\n    $order_by: [ProductionBookSort!]\n  ) {\n    all_production_books(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.ProductionBookPaginationDocument,
    "\n  query ProductionBookDetailed($code: String!) {\n    production_book(code: $code) {\n      ...ItemBase\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n  }\n": types.ProductionBookDetailedDocument,
    "\n  query RecipePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RecipeFilter\n    $order_by: [RecipeSort!]\n  ) {\n    all_recipes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.RecipePaginationDocument,
    "\n  query RecipeDetailed($code: String!) {\n    recipe(code: $code) {\n      ...ItemBase\n\n      result_quantity\n      result_item {\n        ...Card_ItemlistItem\n      }\n\n      required_materials {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.RecipeDetailedDocument,
    "\n  query SealBreakHelpPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: SealBreakHelpFilter\n    $order_by: [SealBreakHelpSort!]\n  ) {\n    all_seal_break_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.SealBreakHelpPaginationDocument,
    "\n  query SealBreakHelpDetailed($code: String!) {\n    seal_break_help: seal_break_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.SealBreakHelpDetailedDocument,
    "\n  query UpgradeCrystalPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeCrystalFilter\n    $order_by: [UpgradeCrystalSort!]\n  ) {\n    all_upgrade_crystals(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.UpgradeCrystalPaginationDocument,
    "\n  query UpgradeCrystalDetailed($code: String!) {\n    upgrade_crystal(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.UpgradeCrystalDetailedDocument,
    "\n  query UpgradeHelpPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeHelpFilter\n    $order_by: [UpgradeHelpSort!]\n  ) {\n    all_upgrade_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.UpgradeHelpPaginationDocument,
    "\n  query UpgradeHelpDetailed($code: String!) {\n    upgrade_help: upgrade_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.UpgradeHelpDetailedDocument,
    "\n  query UpgradeStonePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeStoneFilter\n    $order_by: [UpgradeStoneSort!]\n  ) {\n    all_upgrade_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.UpgradeStonePaginationDocument,
    "\n  query UpgradeStoneDetailed($code: String!) {\n    upgrade_stone(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.UpgradeStoneDetailedDocument,
    "\n  query EssencesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: EssenceFilter\n    $order_by: [EssenceSort!]\n  ) {\n    all_essences(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        required_level\n        grade\n        is_core\n        equip_type\n        ...EffectsFragment\n      }\n    }\n  }\n": types.EssencesPaginationDocument,
    "\n  query EssenceDetailed($code: String!) {\n    essence(code: $code) {\n      ...ItemBase\n\n      required_level\n      is_core\n      equip_type\n\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n  }\n": types.EssenceDetailedDocument,
    "\n  query EssenceHelpItemsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: EssenceHelpFilter\n    $order_by: [EssenceHelpSort!]\n  ) {\n    all_essence_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.EssenceHelpItemsPaginationDocument,
    "\n  query EssenceHelpDetailed($code: String!) {\n    essence_help: essence_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n  }\n": types.EssenceHelpDetailedDocument,
    "\n  query AccessoriesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: AccessoryFilter\n    $order_by: [AccessorySort!]\n  ) {\n    all_accessories(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        accessory_type\n        duration\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n": types.AccessoriesPaginationDocument,
    "\n  query AccessoryDetailed($code: String!) {\n    accessory(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.AccessoryDetailedDocument,
    "\n  query DressesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DressFilter\n    $order_by: [DressSort!]\n  ) {\n    all_dresses(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n": types.DressesPaginationDocument,
    "\n  query DressDetailed($code: String!) {\n    dress(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.DressDetailedDocument,
    "\n  query HatsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: HatFilter\n    $order_by: [HatSort!]\n  ) {\n    all_hats(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n": types.HatsPaginationDocument,
    "\n  query HatDetailed($code: String!) {\n    hat(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.HatDetailedDocument,
    "\n  query FishingBaitPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingBaitFilter\n    $order_by: [FishingBaitSort!]\n  ) {\n    all_fishing_baits(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.FishingBaitPaginationDocument,
    "\n  query FishingBaitDetailed($code: String!) {\n    fishing_bait(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.FishingBaitDetailedDocument,
    "\n  query FishingMaterialPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingMaterialFilter\n    $order_by: [FishingMaterialSort!]\n  ) {\n    all_fishing_materials(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.FishingMaterialPaginationDocument,
    "\n  query FishingMaterialDetailed($code: String!) {\n    fishing_material(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.FishingMaterialDetailedDocument,
    "\n  query BulletPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: BulletFilter\n    $order_by: [BulletSort!]\n  ) {\n    all_bullets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.BulletPaginationDocument,
    "\n  query BulletDetailed($code: String!) {\n    bullet(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.BulletDetailedDocument,
    "\n  query ConsumablePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ConsumableFilter\n    $order_by: [ConsumableSort!]\n  ) {\n    all_consumables(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        level_land\n        level_sea\n      }\n    }\n  }\n": types.ConsumablePaginationDocument,
    "\n  query ConsumableDetailed($code: String!) {\n    consumable(code: $code) {\n      description\n      level_land\n      level_sea\n      cooldown\n      cooldown_id\n      cast_time\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ConsumableDetailedDocument,
    "\n  query RandomBoxPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RandomBoxFilter\n    $order_by: [RandomBoxSort!]\n  ) {\n    all_random_boxes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        level_land\n        level_sea\n      }\n    }\n  }\n": types.RandomBoxPaginationDocument,
    "\n  query RandomBoxDetailed($code: String!) {\n    random_box(code: $code) {\n      ...ItemBase\n      rewards {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.RandomBoxDetailedDocument,
    "\n  query SkillBookPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: SkillBookFilter\n    $order_by: [SkillBookSort!]\n  ) {\n    all_skill_books(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        skill {\n          required_level_land\n          required_level_sea\n          ...CharacterClassFragment\n        }\n      }\n    }\n  }\n": types.SkillBookPaginationDocument,
    "\n  query SkillBookDetailed($code: String!) {\n    skill_book(code: $code) {\n      ...ItemBase\n      skill {\n        ...SkillsCard_Fragment\n      }\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.SkillBookDetailedDocument,
    "\n  query PetsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetFilter\n    $order_by: [PetSort!]\n  ) {\n    all_pets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n        is_unlimited\n        initial_courage\n      }\n    }\n  }\n": types.PetsPaginationDocument,
    "\n  query PetDetailed($code: String!) {\n    pet(code: $code) {\n      is_unlimited\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.PetDetailedDocument,
    "\n  query PetCombineHelpItemsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetCombineHelpFilter\n    $order_by: [PetCombineHelpSort!]\n  ) {\n    all_pet_combine_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.PetCombineHelpItemsPaginationDocument,
    "\n  query PetCombineHelpDetailed($code: String!) {\n    pet_combine_help: pet_combine_help_item(code: $code) {\n      efficiency: value\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.PetCombineHelpDetailedDocument,
    "\n  query PetCombineStonesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetCombineStoneFilter\n    $order_by: [PetCombineStoneSort!]\n  ) {\n    all_pet_combine_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.PetCombineStonesPaginationDocument,
    "\n  query PetCombineStoneDetailed($code: String!) {\n    pet_combine_stone(code: $code) {\n      min_value\n      max_value\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.PetCombineStoneDetailedDocument,
    "\n  query PetSkillStonesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetSkillStoneFilter\n    $order_by: [PetSkillStoneSort!]\n  ) {\n    all_pet_skill_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n        skill {\n          required_level_land\n          required_level_sea\n        }\n      }\n    }\n  }\n": types.PetSkillStonesPaginationDocument,
    "\n  query PetSkillStoneDetailed($code: String!) {\n    pet_skill_stone(code: $code) {\n      skill {\n        ...SkillsCard_Fragment\n      }\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.PetSkillStoneDetailedDocument,
    "\n  query RidingPetsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RidingPetFilter\n    $order_by: [RidingPetSort!]\n  ) {\n    all_riding_pets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n      }\n    }\n  }\n": types.RidingPetsPaginationDocument,
    "\n  query RidingPetDetailed($code: String!) {\n    riding_pet(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.RidingPetDetailedDocument,
    "\n  query QuestsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestFilter\n    $order_by: [QuestSort!]\n  ) {\n    all_quests(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        title\n        level\n        is_sea\n        is_explorer\n        is_mercenary\n        is_noble\n        is_saint\n        start_area {\n          name\n        }\n      }\n    }\n  }\n": types.QuestsPaginationDocument,
    "\n  query QuestDetailed($code: String!) {\n    quest(code: $code) {\n      code\n      title\n      is_sea\n      level\n      is_noble\n      is_saint\n      is_mercenary\n      is_explorer\n\n      start_area {\n        map_code\n        name\n      }\n      start_npc {\n        code\n        name\n      }\n      end_npc {\n        code\n        name\n      }\n\n      money\n      experience\n\n      description\n      pre_dialog\n      start_dialog\n      run_dialog\n      finish_dialog\n\n      previous_quest {\n        ...QuestsList_Fragment\n      }\n\n      selectable_items_count\n      reward_items {\n        ...QuestRewardEdge\n      }\n\n      ...QuestMissions\n    }\n\n    next_quests: all_quests(filter: {previous_quest_code: {eq: $code}}) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n": types.QuestDetailedDocument,
    "\n  query QuestItemPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestItemFilter\n    $order_by: [QuestItemSort!]\n  ) {\n    all_quest_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.QuestItemPaginationDocument,
    "\n  query QuestItemDetailed($code: String!) {\n    quest_item(code: $code) {\n      ...ItemBase\n    }\n\n    quests_by_give_item: all_quests(\n      limit: -1\n      filter: {give_items: {item_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n\n    quests_by_mission: all_quests(\n      limit: -1\n      filter: {missions: {quest_item_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.QuestItemDetailedDocument,
    "\n  query QuestScrollPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestScrollFilter\n    $order_by: [QuestScrollSort!]\n  ) {\n    all_quest_scrolls(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        quest {\n          title\n          level\n          is_sea\n          is_mercenary\n          is_saint\n          is_noble\n          is_explorer\n        }\n      }\n    }\n  }\n": types.QuestScrollPaginationDocument,
    "\n  query QuestScrollDetailed($code: String!) {\n    quest_scroll(code: $code) {\n      ...ItemBase\n\n      quest {\n        ...QuestsList_Fragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.QuestScrollDetailedDocument,
    "\n  query ShipAnchorPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipAnchorFilter\n    $order_by: [ShipAnchorSort!]\n  ) {\n    all_ship_anchors(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipAnchorPaginationDocument,
    "\n  query ShipAnchorDetailed($code: String!) {\n    ship_anchor(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipAnchorDetailedDocument,
    "\n  query ShipBodiesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipBodyFilter\n    $order_by: [ShipBodySort!]\n  ) {\n    all_ship_bodies(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipBodiesPaginationDocument,
    "\n  query ShipBodyDetailed($code: String!) {\n    ship_body(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipBodyDetailedDocument,
    "\n  query ShipFigurePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFigureFilter\n    $order_by: [ShipFigureSort!]\n  ) {\n    all_ship_figures(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipFigurePaginationDocument,
    "\n  query ShipFigureDetailed($code: String!) {\n    ship_figure(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipFigureDetailedDocument,
    "\n  query ShipFlagPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFlagFilter\n    $order_by: [ShipFlagSort!]\n  ) {\n    all_ship_flags(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.ShipFlagPaginationDocument,
    "\n  query ShipFlagDetailed($code: String!) {\n    ship_flag(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipFlagDetailedDocument,
    "\n  query ShipFrontPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFrontFilter\n    $order_by: [ShipFrontSort!]\n  ) {\n    all_ship_fronts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipFrontPaginationDocument,
    "\n  query ShipFrontDetailed($code: String!) {\n    ship_front(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipFrontDetailedDocument,
    "\n  query ShipHeadMastPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipHeadMastFilter\n    $order_by: [ShipHeadMastSort!]\n  ) {\n    all_ship_head_masts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipHeadMastPaginationDocument,
    "\n  query ShipHeadMastDetailed($code: String!) {\n    ship_head_mast(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipHeadMastDetailedDocument,
    "\n  query ShipMagicStonePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipMagicStoneFilter\n    $order_by: [ShipMagicStoneSort!]\n  ) {\n    all_ship_magic_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipMagicStonePaginationDocument,
    "\n  query ShipMagicStoneDetailed($code: String!) {\n    ship_magic_stone(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipMagicStoneDetailedDocument,
    "\n  query ShipMainMastPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipMainMastFilter\n    $order_by: [ShipMainMastSort!]\n  ) {\n    all_ship_main_masts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipMainMastPaginationDocument,
    "\n  query ShipMainMastDetailed($code: String!) {\n    ship_main_mast(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipMainMastDetailedDocument,
    "\n  query ShipNormalWeaponPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipNormalWeaponFilter\n    $order_by: [ShipNormalWeaponSort!]\n  ) {\n    all_ship_normal_weapons(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipNormalWeaponPaginationDocument,
    "\n  query ShipNormalWeaponDetailed($code: String!) {\n    ship_normal_weapon(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipNormalWeaponDetailedDocument,
    "\n  query ShipShellPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipShellFilter\n    $order_by: [ShipShellSort!]\n  ) {\n    all_ship_shells(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n": types.ShipShellPaginationDocument,
    "\n  query ShipShellDetailed($code: String!) {\n    ship_shell(code: $code) {\n      ...ItemBase\n      level_sea\n      physical_damage\n      explosion_range\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipShellDetailedDocument,
    "\n  query ShipSpecialWeaponPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipSpecialWeaponFilter\n    $order_by: [ShipSpecialWeaponSort!]\n  ) {\n    all_ship_special_weapons(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n": types.ShipSpecialWeaponPaginationDocument,
    "\n  query ShipSpecialWeaponDetailed($code: String!) {\n    ship_special_weapon(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShipSpecialWeaponDetailedDocument,
    "\n  fragment ShipPaginationFragment on ShipBaseMixin {\n    code\n    name\n    icon\n    grade\n    level_sea\n    duration\n    ...ShipClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n": types.ShipPaginationFragmentFragmentDoc,
    "\n  query CoatsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: CoatFilter\n    $order_by: [CoatSort!]\n  ) {\n    all_coats(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n": types.CoatsPaginationDocument,
    "\n  query CoatDetailed($code: String!) {\n    coat(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.CoatDetailedDocument,
    "\n  query GauntletsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: GauntletFilter\n    $order_by: [GauntletSort!]\n  ) {\n    all_gauntlets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n": types.GauntletsPaginationDocument,
    "\n  query GauntletDetailed($code: String!) {\n    gauntlet: gauntlets(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.GauntletDetailedDocument,
    "\n  query PantsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PantsFilter\n    $order_by: [PantsSort!]\n  ) {\n    all_pants(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n": types.PantsPaginationDocument,
    "\n  query PantsDetailed($code: String!) {\n    pants(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.PantsDetailedDocument,
    "\n  query ShieldsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShieldFilter\n    $order_by: [ShieldSort!]\n  ) {\n    all_shields(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n": types.ShieldsPaginationDocument,
    "\n  query ShieldDetailed($code: String!) {\n    shield(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShieldDetailedDocument,
    "\n  query ShoesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShoesFilter\n    $order_by: [ShoesSort!]\n  ) {\n    all_shoes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n": types.ShoesPaginationDocument,
    "\n  query ShoesDetailed($code: String!) {\n    shoes(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.ShoesDetailedDocument,
    "\n  query CariadsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: CariadFilter\n    $order_by: [CariadSort!]\n  ) {\n    all_cariads(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.CariadsPaginationDocument,
    "\n  query CariadDetailed($code: String!) {\n    cariad(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.CariadDetailedDocument,
    "\n  query DaggersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DaggerFilter\n    $order_by: [DaggerSort!]\n  ) {\n    all_daggers(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.DaggersPaginationDocument,
    "\n  query DaggerDetailed($code: String!) {\n    dagger(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.DaggerDetailedDocument,
    "\n  query DualssPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DualsFilter\n    $order_by: [DualsSort!]\n  ) {\n    all_duals(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.DualssPaginationDocument,
    "\n  query DualsDetailed($code: String!) {\n    duals(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.DualsDetailedDocument,
    "\n  query FishingRodsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingRodFilter\n    $order_by: [FishingRodSort!]\n  ) {\n    all_fishing_rods(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.FishingRodsPaginationDocument,
    "\n  query FishingRodDetailed($code: String!) {\n    fishing_rod(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.FishingRodDetailedDocument,
    "\n  query OneHandedSwordsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: OneHandedSwordFilter\n    $order_by: [OneHandedSwordSort!]\n  ) {\n    all_one_handed_swords(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.OneHandedSwordsPaginationDocument,
    "\n  query OneHandedSwordDetailed($code: String!) {\n    one_handed_sword(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.OneHandedSwordDetailedDocument,
    "\n  query RapiersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RapierFilter\n    $order_by: [RapierSort!]\n  ) {\n    all_rapiers(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.RapiersPaginationDocument,
    "\n  query RapierDetailed($code: String!) {\n    rapier(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.RapierDetailedDocument,
    "\n  query RiflesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RifleFilter\n    $order_by: [RifleSort!]\n  ) {\n    all_rifles(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.RiflesPaginationDocument,
    "\n  query RifleDetailed($code: String!) {\n    rifle(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.RifleDetailedDocument,
    "\n  query TwoHandedSwordsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: TwoHandedSwordFilter\n    $order_by: [TwoHandedSwordSort!]\n  ) {\n    all_two_handed_swords(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n": types.TwoHandedSwordsPaginationDocument,
    "\n  query TwoHandedSwordDetailed($code: String!) {\n    two_handed_sword(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n": types.TwoHandedSwordDetailedDocument,
    "\n  fragment WeaponPaginationFragment on WeaponMixin {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n    duration\n    ...CharacterClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n": types.WeaponPaginationFragmentFragmentDoc,
    "\n  fragment ArmorPaginationFragment on ArmorMixin {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n    duration\n    ...CharacterClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n": types.ArmorPaginationFragmentFragmentDoc,
    "\n  query MapDetailed($code: String!) {\n    map(code: $code) {\n      ...MapCanvas_MapDetailsFragment\n\n      monsters {\n        ...MapCanvas_MonsterPositionFragment\n      }\n\n      npcs {\n        ...MapCanvas_NPCPositionFragment\n      }\n    }\n  }\n": types.MapDetailedDocument,
    "\n  query TowerFloors {\n    all_tower_floors(limit: -1) {\n      items {\n        floor_number\n        time\n        monsters {\n          amount\n          monster {\n            code\n            name\n            icon\n            level\n            grade\n          }\n        }\n      }\n    }\n  }\n": types.TowerFloorsDocument,
    "\n  query PlannerData($codes: [String!]!, $class: BaseClassType!) {\n    all_player_skills(limit: -1, filter: {reference_code: {in: $codes}}) {\n      skills: items {\n        ...PlannerPlayerSkill\n      }\n    }\n\n    player_level_stats(base_class: $class) {\n      ...PlayerLevelData\n    }\n\n    player_stats(base_class: $class) {\n      ...PlayerStatsData\n    }\n  }\n": types.PlannerDataDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment RandomBox on RandomBox {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n  }\n"): (typeof documents)["\n  fragment RandomBox on RandomBox {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DroppedBy on Drop {\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n  }\n"): (typeof documents)["\n  fragment DroppedBy on Drop {\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DropsList_Fragment on Drop {\n    quantity\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"): (typeof documents)["\n  fragment DropsList_Fragment on Drop {\n    quantity\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DropsListMoney_Fragment on Money {\n    min\n    max\n  }\n"): (typeof documents)["\n  fragment DropsListMoney_Fragment on Money {\n    min\n    max\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment Card_ItemlistItem on ItemList {\n    code\n    name\n    icon\n    grade\n    tablename\n    gender\n    duration\n    level_land\n    level_sea\n    ...CharacterClassFragment\n    ...ShipClassFragment\n    ...EffectsFragment\n  }\n"): (typeof documents)["\n  fragment Card_ItemlistItem on ItemList {\n    code\n    name\n    icon\n    grade\n    tablename\n    gender\n    duration\n    level_land\n    level_sea\n    ...CharacterClassFragment\n    ...ShipClassFragment\n    ...EffectsFragment\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ItemBase on BaseMixin {\n    code\n    name\n    icon\n    grade\n    duration\n    stack_size\n    npc_buy_price\n    npc_sell_price\n    is_tradable\n    is_storageable\n    is_destroyable\n    is_sellable\n  }\n"): (typeof documents)["\n  fragment ItemBase on BaseMixin {\n    code\n    name\n    icon\n    grade\n    duration\n    stack_size\n    npc_buy_price\n    npc_sell_price\n    is_tradable\n    is_storageable\n    is_destroyable\n    is_sellable\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ItemSetCard on ItemSetMixin {\n    item_set {\n      name\n      items {\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n      ...EffectsFragment\n    }\n  }\n"): (typeof documents)["\n  fragment ItemSetCard on ItemSetMixin {\n    item_set {\n      name\n      items {\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n      ...EffectsFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NeededFor on RecipeProduction {\n    ...ProducedBy\n  }\n"): (typeof documents)["\n  fragment NeededFor on RecipeProduction {\n    ...ProducedBy\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment NPCStoreItemlist_Fragment on NpcStoreItem {\n    section_name\n    page_name\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"): (typeof documents)["\n  fragment NPCStoreItemlist_Fragment on NpcStoreItem {\n    section_name\n    page_name\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ProducedBy on RecipeProduction {\n    __typename\n    ... on Recipe {\n      code\n      name\n      icon\n      grade\n    }\n    ... on Production {\n      code\n      result_item {\n        code\n        name\n        icon\n        grade\n        duration\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ProducedBy on RecipeProduction {\n    __typename\n    ... on Recipe {\n      code\n      name\n      icon\n      grade\n    }\n    ... on Production {\n      code\n      result_item {\n        code\n        name\n        icon\n        grade\n        duration\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment QuestMission on QuestMission {\n    work_type\n    count\n    description\n\n    item {\n      ...Card_ItemlistItem\n    }\n\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n\n    quest_item {\n      code\n      name\n      icon\n      grade\n    }\n\n    map {\n      code\n      name\n    }\n\n    npc {\n      ...SoldByNPC\n    }\n  }\n"): (typeof documents)["\n  fragment QuestMission on QuestMission {\n    work_type\n    count\n    description\n\n    item {\n      ...Card_ItemlistItem\n    }\n\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n\n    quest_item {\n      code\n      name\n      icon\n      grade\n    }\n\n    map {\n      code\n      name\n    }\n\n    npc {\n      ...SoldByNPC\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment QuestGiveItem on QuestGiveItem {\n    amount\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"): (typeof documents)["\n  fragment QuestGiveItem on QuestGiveItem {\n    amount\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment QuestMissions on Quest {\n    missions {\n      ...QuestMission\n    }\n    give_items {\n      ...QuestGiveItem\n    }\n  }\n"): (typeof documents)["\n  fragment QuestMissions on Quest {\n    missions {\n      ...QuestMission\n    }\n    give_items {\n      ...QuestGiveItem\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment QuestRewardEdge on QuestRewardItem {\n    amount\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"): (typeof documents)["\n  fragment QuestRewardEdge on QuestRewardItem {\n    amount\n    item {\n      ...Card_ItemlistItem\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment QuestsList_Fragment on Quest {\n    code\n    title\n    level\n    is_sea\n    is_noble\n    is_saint\n    is_mercenary\n    is_explorer\n  }\n"): (typeof documents)["\n  fragment QuestsList_Fragment on Quest {\n    code\n    title\n    level\n    is_sea\n    is_noble\n    is_saint\n    is_mercenary\n    is_explorer\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShipDetails on ShipBaseMixin {\n    guns_front\n    guns_side\n    crew_size\n    physical_defense\n    protection\n    balance\n    dp\n    en\n    en_usage\n    en_recovery\n    acceleration\n    deceleration\n    turning_power\n    favorable_wind\n    adverse_wind\n    physical_damage\n    weapon_range\n    critical_chance\n    reload_speed\n    hit_range\n  }\n"): (typeof documents)["\n  fragment ShipDetails on ShipBaseMixin {\n    guns_front\n    guns_side\n    crew_size\n    physical_defense\n    protection\n    balance\n    dp\n    en\n    en_usage\n    en_recovery\n    acceleration\n    deceleration\n    turning_power\n    favorable_wind\n    adverse_wind\n    physical_damage\n    weapon_range\n    critical_chance\n    reload_speed\n    hit_range\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SkillsCard_Fragment on SkillMixin {\n    name\n    description\n    icon\n    required_level_land\n    required_level_sea\n    cast_time\n    cooldown\n  }\n"): (typeof documents)["\n  fragment SkillsCard_Fragment on SkillMixin {\n    name\n    description\n    icon\n    required_level_land\n    required_level_sea\n    cast_time\n    cooldown\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SoldByNPC on Npc {\n    code\n    name\n    icon\n    grade\n    level\n    is_sea\n    positions {\n      map {\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment SoldByNPC on Npc {\n    code\n    name\n    icon\n    grade\n    level\n    is_sea\n    positions {\n      map {\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UpgradeRule on UpgradeRule {\n    level\n    cost\n    ...EffectsFragment\n  }\n"): (typeof documents)["\n  fragment UpgradeRule on UpgradeRule {\n    level\n    cost\n    ...EffectsFragment\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WeaponUpgradeRule on WeaponMixin {\n    upgrade_rule {\n      ...UpgradeRule\n    }\n  }\n"): (typeof documents)["\n  fragment WeaponUpgradeRule on WeaponMixin {\n    upgrade_rule {\n      ...UpgradeRule\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GlobalSearch($s: String!) {\n    search(s: $s, limit: 15) {\n      __typename\n      ... on ActorMixin {\n        code\n        name\n        icon\n        actorGrade: grade\n        level\n        is_sea\n      }\n      ... on ItemList {\n        code\n        name\n        icon\n        tablename\n        duration\n        gender\n        level_land\n        level_sea\n        itemGrade: grade\n        # ...EffectsFragment\n        ...CharacterClassFragment\n        ...ShipClassFragment\n      }\n      ... on Quest {\n        code\n        title\n        level\n        is_sea\n      }\n    }\n  }\n"): (typeof documents)["\n  query GlobalSearch($s: String!) {\n    search(s: $s, limit: 15) {\n      __typename\n      ... on ActorMixin {\n        code\n        name\n        icon\n        actorGrade: grade\n        level\n        is_sea\n      }\n      ... on ItemList {\n        code\n        name\n        icon\n        tablename\n        duration\n        gender\n        level_land\n        level_sea\n        itemGrade: grade\n        # ...EffectsFragment\n        ...CharacterClassFragment\n        ...ShipClassFragment\n      }\n      ... on Quest {\n        code\n        title\n        level\n        is_sea\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MapCanvas_MonsterPositionFragment on MonsterPosition {\n    __typename\n    index\n    amount\n    respawn_time\n    x\n    y\n    # z\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      # is_sea\n    }\n  }\n"): (typeof documents)["\n  fragment MapCanvas_MonsterPositionFragment on MonsterPosition {\n    __typename\n    index\n    amount\n    respawn_time\n    x\n    y\n    # z\n    monster {\n      code\n      name\n      icon\n      grade\n      level\n      # is_sea\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MapCanvas_NPCPositionFragment on NpcPosition {\n    __typename\n    index\n    x\n    y\n    # z\n    npc {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n  }\n"): (typeof documents)["\n  fragment MapCanvas_NPCPositionFragment on NpcPosition {\n    __typename\n    index\n    x\n    y\n    # z\n    npc {\n      code\n      name\n      icon\n      grade\n      level\n      is_sea\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MapCanvas_MapDetailsFragment on Map {\n    code\n    name\n\n    top\n    left\n    width\n    height\n  }\n"): (typeof documents)["\n  fragment MapCanvas_MapDetailsFragment on Map {\n    code\n    name\n\n    top\n    left\n    width\n    height\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ModelFragment on Available3DModel {\n    asset_path\n    animation_name\n    character_class\n    gender\n  }\n"): (typeof documents)["\n  fragment ModelFragment on Available3DModel {\n    asset_path\n    animation_name\n    character_class\n    gender\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlannerPlayerSkillClassFlags on PlayerSkill {\n    is_explorer\n    is_sniper\n    is_excavator\n\n    is_noble\n    is_court_magician\n    is_magic_knight\n\n    is_saint\n    is_shaman\n    is_priest\n\n    is_mercenary\n    is_gladiator\n    is_guardian_swordsman\n\n    is_torpedo\n    is_armored\n    is_assault\n    is_big_gun\n    is_maintenance\n  }\n"): (typeof documents)["\n  fragment PlannerPlayerSkillClassFlags on PlayerSkill {\n    is_explorer\n    is_sniper\n    is_excavator\n\n    is_noble\n    is_court_magician\n    is_magic_knight\n\n    is_saint\n    is_shaman\n    is_priest\n\n    is_mercenary\n    is_gladiator\n    is_guardian_swordsman\n\n    is_torpedo\n    is_armored\n    is_assault\n    is_big_gun\n    is_maintenance\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlannerPlayerSkill on PlayerSkill {\n    code\n    reference_code\n    icon\n    name\n    skill_level\n    skill_max_level\n    required_level_land\n    required_level_sea\n    mana_cost\n    cast_distance\n    cast_time\n    effect_range\n    cooldown\n    description\n    required_weapons\n    ...PlannerPlayerSkillClassFlags\n\n    required_skills {\n      required_skill_code\n    }\n  }\n"): (typeof documents)["\n  fragment PlannerPlayerSkill on PlayerSkill {\n    code\n    reference_code\n    icon\n    name\n    skill_level\n    skill_max_level\n    required_level_land\n    required_level_sea\n    mana_cost\n    cast_distance\n    cast_time\n    effect_range\n    cooldown\n    description\n    required_weapons\n    ...PlannerPlayerSkillClassFlags\n\n    required_skills {\n      required_skill_code\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlayerLevelData on PlayerLevelStat {\n    level\n    max_hp\n    max_mp\n    avoidance\n\n    range_min_attack\n    range_max_attack\n    range_hitrate\n    range_critical_rate\n\n    magic_min_attack\n    magic_max_attack\n    magic_hitrate\n    magic_critical_rate\n\n    melee_min_attack\n    melee_max_attack\n    melee_hitrate\n    melee_critical_rate\n  }\n"): (typeof documents)["\n  fragment PlayerLevelData on PlayerLevelStat {\n    level\n    max_hp\n    max_mp\n    avoidance\n\n    range_min_attack\n    range_max_attack\n    range_hitrate\n    range_critical_rate\n\n    magic_min_attack\n    magic_max_attack\n    magic_hitrate\n    magic_critical_rate\n\n    melee_min_attack\n    melee_max_attack\n    melee_hitrate\n    melee_critical_rate\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlayerStatsData on PlayerStatusStat {\n    point_level\n    stat_type\n\n    max_hp_increment\n    max_mp_increment\n    avoidance_increment\n\n    range_min_attack_increment\n    range_max_attack_increment\n    range_hitrate_increment\n    range_critical_rate_increment\n\n    magic_min_attack_increment\n    magic_max_attack_increment\n    magic_hitrate_increment\n    magic_critical_rate_increment\n\n    melee_min_attack_increment\n    melee_max_attack_increment\n    melee_hitrate_increment\n    melee_critical_rate_increment\n  }\n"): (typeof documents)["\n  fragment PlayerStatsData on PlayerStatusStat {\n    point_level\n    stat_type\n\n    max_hp_increment\n    max_mp_increment\n    avoidance_increment\n\n    range_min_attack_increment\n    range_max_attack_increment\n    range_hitrate_increment\n    range_critical_rate_increment\n\n    magic_min_attack_increment\n    magic_max_attack_increment\n    magic_hitrate_increment\n    magic_critical_rate_increment\n\n    melee_min_attack_increment\n    melee_max_attack_increment\n    melee_hitrate_increment\n    melee_critical_rate_increment\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment CharacterClassFragment on ClassLandMixin {\n    is_noble\n    is_magic_knight\n    is_court_magician\n\n    is_mercenary\n    is_gladiator\n    is_guardian_swordsman\n\n    is_explorer\n    is_excavator\n    is_sniper\n\n    is_saint\n    is_priest\n    is_shaman\n  }\n"): (typeof documents)["\n  fragment CharacterClassFragment on ClassLandMixin {\n    is_noble\n    is_magic_knight\n    is_court_magician\n\n    is_mercenary\n    is_gladiator\n    is_guardian_swordsman\n\n    is_explorer\n    is_excavator\n    is_sniper\n\n    is_saint\n    is_priest\n    is_shaman\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EffectFragment on Effect {\n    effect_code\n    operator\n    value\n  }\n"): (typeof documents)["\n  fragment EffectFragment on Effect {\n    effect_code\n    operator\n    value\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EffectsFragment on EffectMixin {\n    effects {\n      ...EffectFragment\n    }\n  }\n"): (typeof documents)["\n  fragment EffectsFragment on EffectMixin {\n    effects {\n      ...EffectFragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShipClassFragment on ClassSeaMixin {\n    is_armored\n    is_big_gun\n    is_assault\n    is_torpedo\n    is_maintenance\n  }\n"): (typeof documents)["\n  fragment ShipClassFragment on ClassSeaMixin {\n    is_armored\n    is_big_gun\n    is_assault\n    is_torpedo\n    is_maintenance\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MonstersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: MonsterFilter\n    $order_by: [MonsterSort!]\n  ) {\n    all_monsters(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level\n        is_sea\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query MonstersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: MonsterFilter\n    $order_by: [MonsterSort!]\n  ) {\n    all_monsters(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level\n        is_sea\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MonsterDetailed($code: String!) {\n    monster(code: $code) {\n      code\n      name\n      icon\n      grade\n      is_sea\n      level\n      health_points\n      physical_defense\n      magical_defense\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      is_ranged\n      attack_range\n      experience\n      is_tameable\n      attack_vision_range\n      nearby_attack_vision_range\n\n      # TODO: definitely have to change that so it's a 1:n relationship.. :)\n      skill_1 {\n        ...SkillsCard_Fragment\n      }\n      skill_2 {\n        ...SkillsCard_Fragment\n      }\n\n      models {\n        ...ModelFragment\n      }\n\n      drops {\n        ...DropsList_Fragment\n      }\n\n      money {\n        ...DropsListMoney_Fragment\n      }\n\n      positions {\n        map_code\n        ...MapCanvas_MonsterPositionFragment\n      }\n    }\n\n    # less data queried instead of asking for map data on each positions edge\n    maps: all_maps(limit: -1, filter: {monsters: {monster_code: {eq: $code}}}) {\n      items {\n        ...MapCanvas_MapDetailsFragment\n      }\n    }\n\n    quests: all_quests(\n      limit: -1\n      filter: {missions: {monster_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query MonsterDetailed($code: String!) {\n    monster(code: $code) {\n      code\n      name\n      icon\n      grade\n      is_sea\n      level\n      health_points\n      physical_defense\n      magical_defense\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      is_ranged\n      attack_range\n      experience\n      is_tameable\n      attack_vision_range\n      nearby_attack_vision_range\n\n      # TODO: definitely have to change that so it's a 1:n relationship.. :)\n      skill_1 {\n        ...SkillsCard_Fragment\n      }\n      skill_2 {\n        ...SkillsCard_Fragment\n      }\n\n      models {\n        ...ModelFragment\n      }\n\n      drops {\n        ...DropsList_Fragment\n      }\n\n      money {\n        ...DropsListMoney_Fragment\n      }\n\n      positions {\n        map_code\n        ...MapCanvas_MonsterPositionFragment\n      }\n    }\n\n    # less data queried instead of asking for map data on each positions edge\n    maps: all_maps(limit: -1, filter: {monsters: {monster_code: {eq: $code}}}) {\n      items {\n        ...MapCanvas_MapDetailsFragment\n      }\n    }\n\n    quests: all_quests(\n      limit: -1\n      filter: {missions: {monster_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NPCsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: NpcFilter\n    $order_by: [NpcSort!]\n  ) {\n    all_npcs(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level\n        is_sea\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query NPCsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: NpcFilter\n    $order_by: [NpcSort!]\n  ) {\n    all_npcs(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level\n        is_sea\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NPCDetailed($code: String!) {\n    npc(code: $code) {\n      code\n      name\n      icon\n      grade\n      is_sea\n      level\n      health_points\n\n      models {\n        ...ModelFragment\n      }\n\n      positions {\n        map_code\n        ...MapCanvas_NPCPositionFragment\n      }\n\n      store_items {\n        ...NPCStoreItemlist_Fragment\n      }\n    }\n\n    # less data queried instead of asking for map data on each positions edge\n    maps: all_maps(limit: -1, filter: {npcs: {npc_code: {eq: $code}}}) {\n      items {\n        ...MapCanvas_MapDetailsFragment\n      }\n    }\n\n    quests: all_quests(limit: -1, filter: {start_npc_code: {eq: $code}}) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query NPCDetailed($code: String!) {\n    npc(code: $code) {\n      code\n      name\n      icon\n      grade\n      is_sea\n      level\n      health_points\n\n      models {\n        ...ModelFragment\n      }\n\n      positions {\n        map_code\n        ...MapCanvas_NPCPositionFragment\n      }\n\n      store_items {\n        ...NPCStoreItemlist_Fragment\n      }\n    }\n\n    # less data queried instead of asking for map data on each positions edge\n    maps: all_maps(limit: -1, filter: {npcs: {npc_code: {eq: $code}}}) {\n      items {\n        ...MapCanvas_MapDetailsFragment\n      }\n    }\n\n    quests: all_quests(limit: -1, filter: {start_npc_code: {eq: $code}}) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MaterialPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: MaterialFilter\n    $order_by: [MaterialSort!]\n  ) {\n    all_materials(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query MaterialPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: MaterialFilter\n    $order_by: [MaterialSort!]\n  ) {\n    all_materials(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MaterialDetailed($code: String!) {\n    material(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query MaterialDetailed($code: String!) {\n    material(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductionPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ProductionFilter\n    $order_by: [ProductionSort!]\n  ) {\n    all_productions(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        type\n        points_required\n        result_quantity\n        result_item {\n          name\n          icon\n          grade\n          level_land\n          level_sea\n          duration\n          gender\n          ...CharacterClassFragment\n          ...EffectsFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductionPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ProductionFilter\n    $order_by: [ProductionSort!]\n  ) {\n    all_productions(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        type\n        points_required\n        result_quantity\n        result_item {\n          name\n          icon\n          grade\n          level_land\n          level_sea\n          duration\n          gender\n          ...CharacterClassFragment\n          ...EffectsFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductionDetailed($code: String!) {\n    production(code: $code) {\n      points_required\n      type\n\n      result_quantity\n      result_item {\n        ...Card_ItemlistItem\n      }\n\n      required_materials {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductionDetailed($code: String!) {\n    production(code: $code) {\n      points_required\n      type\n\n      result_quantity\n      result_item {\n        ...Card_ItemlistItem\n      }\n\n      required_materials {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductionBookPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ProductionBookFilter\n    $order_by: [ProductionBookSort!]\n  ) {\n    all_production_books(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query ProductionBookPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ProductionBookFilter\n    $order_by: [ProductionBookSort!]\n  ) {\n    all_production_books(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProductionBookDetailed($code: String!) {\n    production_book(code: $code) {\n      ...ItemBase\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n  }\n"): (typeof documents)["\n  query ProductionBookDetailed($code: String!) {\n    production_book(code: $code) {\n      ...ItemBase\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RecipePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RecipeFilter\n    $order_by: [RecipeSort!]\n  ) {\n    all_recipes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query RecipePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RecipeFilter\n    $order_by: [RecipeSort!]\n  ) {\n    all_recipes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RecipeDetailed($code: String!) {\n    recipe(code: $code) {\n      ...ItemBase\n\n      result_quantity\n      result_item {\n        ...Card_ItemlistItem\n      }\n\n      required_materials {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query RecipeDetailed($code: String!) {\n    recipe(code: $code) {\n      ...ItemBase\n\n      result_quantity\n      result_item {\n        ...Card_ItemlistItem\n      }\n\n      required_materials {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SealBreakHelpPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: SealBreakHelpFilter\n    $order_by: [SealBreakHelpSort!]\n  ) {\n    all_seal_break_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query SealBreakHelpPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: SealBreakHelpFilter\n    $order_by: [SealBreakHelpSort!]\n  ) {\n    all_seal_break_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SealBreakHelpDetailed($code: String!) {\n    seal_break_help: seal_break_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query SealBreakHelpDetailed($code: String!) {\n    seal_break_help: seal_break_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpgradeCrystalPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeCrystalFilter\n    $order_by: [UpgradeCrystalSort!]\n  ) {\n    all_upgrade_crystals(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query UpgradeCrystalPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeCrystalFilter\n    $order_by: [UpgradeCrystalSort!]\n  ) {\n    all_upgrade_crystals(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpgradeCrystalDetailed($code: String!) {\n    upgrade_crystal(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query UpgradeCrystalDetailed($code: String!) {\n    upgrade_crystal(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpgradeHelpPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeHelpFilter\n    $order_by: [UpgradeHelpSort!]\n  ) {\n    all_upgrade_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query UpgradeHelpPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeHelpFilter\n    $order_by: [UpgradeHelpSort!]\n  ) {\n    all_upgrade_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpgradeHelpDetailed($code: String!) {\n    upgrade_help: upgrade_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query UpgradeHelpDetailed($code: String!) {\n    upgrade_help: upgrade_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpgradeStonePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeStoneFilter\n    $order_by: [UpgradeStoneSort!]\n  ) {\n    all_upgrade_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query UpgradeStonePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: UpgradeStoneFilter\n    $order_by: [UpgradeStoneSort!]\n  ) {\n    all_upgrade_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UpgradeStoneDetailed($code: String!) {\n    upgrade_stone(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query UpgradeStoneDetailed($code: String!) {\n    upgrade_stone(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EssencesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: EssenceFilter\n    $order_by: [EssenceSort!]\n  ) {\n    all_essences(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        required_level\n        grade\n        is_core\n        equip_type\n        ...EffectsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query EssencesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: EssenceFilter\n    $order_by: [EssenceSort!]\n  ) {\n    all_essences(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        required_level\n        grade\n        is_core\n        equip_type\n        ...EffectsFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EssenceDetailed($code: String!) {\n    essence(code: $code) {\n      ...ItemBase\n\n      required_level\n      is_core\n      equip_type\n\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n  }\n"): (typeof documents)["\n  query EssenceDetailed($code: String!) {\n    essence(code: $code) {\n      ...ItemBase\n\n      required_level\n      is_core\n      equip_type\n\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EssenceHelpItemsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: EssenceHelpFilter\n    $order_by: [EssenceHelpSort!]\n  ) {\n    all_essence_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query EssenceHelpItemsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: EssenceHelpFilter\n    $order_by: [EssenceHelpSort!]\n  ) {\n    all_essence_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query EssenceHelpDetailed($code: String!) {\n    essence_help: essence_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n  }\n"): (typeof documents)["\n  query EssenceHelpDetailed($code: String!) {\n    essence_help: essence_help_item(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccessoriesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: AccessoryFilter\n    $order_by: [AccessorySort!]\n  ) {\n    all_accessories(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        accessory_type\n        duration\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query AccessoriesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: AccessoryFilter\n    $order_by: [AccessorySort!]\n  ) {\n    all_accessories(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        accessory_type\n        duration\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AccessoryDetailed($code: String!) {\n    accessory(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query AccessoryDetailed($code: String!) {\n    accessory(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DressesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DressFilter\n    $order_by: [DressSort!]\n  ) {\n    all_dresses(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query DressesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DressFilter\n    $order_by: [DressSort!]\n  ) {\n    all_dresses(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DressDetailed($code: String!) {\n    dress(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query DressDetailed($code: String!) {\n    dress(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HatsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: HatFilter\n    $order_by: [HatSort!]\n  ) {\n    all_hats(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query HatsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: HatFilter\n    $order_by: [HatSort!]\n  ) {\n    all_hats(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        level_land\n        level_sea\n        grade\n        duration\n        gender\n        ...CharacterClassFragment\n        ...EffectsFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query HatDetailed($code: String!) {\n    hat(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query HatDetailed($code: String!) {\n    hat(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n      gender\n\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FishingBaitPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingBaitFilter\n    $order_by: [FishingBaitSort!]\n  ) {\n    all_fishing_baits(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query FishingBaitPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingBaitFilter\n    $order_by: [FishingBaitSort!]\n  ) {\n    all_fishing_baits(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FishingBaitDetailed($code: String!) {\n    fishing_bait(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query FishingBaitDetailed($code: String!) {\n    fishing_bait(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FishingMaterialPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingMaterialFilter\n    $order_by: [FishingMaterialSort!]\n  ) {\n    all_fishing_materials(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query FishingMaterialPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingMaterialFilter\n    $order_by: [FishingMaterialSort!]\n  ) {\n    all_fishing_materials(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FishingMaterialDetailed($code: String!) {\n    fishing_material(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query FishingMaterialDetailed($code: String!) {\n    fishing_material(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BulletPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: BulletFilter\n    $order_by: [BulletSort!]\n  ) {\n    all_bullets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query BulletPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: BulletFilter\n    $order_by: [BulletSort!]\n  ) {\n    all_bullets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BulletDetailed($code: String!) {\n    bullet(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query BulletDetailed($code: String!) {\n    bullet(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ConsumablePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ConsumableFilter\n    $order_by: [ConsumableSort!]\n  ) {\n    all_consumables(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        level_land\n        level_sea\n      }\n    }\n  }\n"): (typeof documents)["\n  query ConsumablePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ConsumableFilter\n    $order_by: [ConsumableSort!]\n  ) {\n    all_consumables(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        level_land\n        level_sea\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ConsumableDetailed($code: String!) {\n    consumable(code: $code) {\n      description\n      level_land\n      level_sea\n      cooldown\n      cooldown_id\n      cast_time\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ConsumableDetailed($code: String!) {\n    consumable(code: $code) {\n      description\n      level_land\n      level_sea\n      cooldown\n      cooldown_id\n      cast_time\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RandomBoxPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RandomBoxFilter\n    $order_by: [RandomBoxSort!]\n  ) {\n    all_random_boxes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        level_land\n        level_sea\n      }\n    }\n  }\n"): (typeof documents)["\n  query RandomBoxPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RandomBoxFilter\n    $order_by: [RandomBoxSort!]\n  ) {\n    all_random_boxes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        level_land\n        level_sea\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RandomBoxDetailed($code: String!) {\n    random_box(code: $code) {\n      ...ItemBase\n      rewards {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query RandomBoxDetailed($code: String!) {\n    random_box(code: $code) {\n      ...ItemBase\n      rewards {\n        quantity\n        item {\n          ...Card_ItemlistItem\n        }\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SkillBookPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: SkillBookFilter\n    $order_by: [SkillBookSort!]\n  ) {\n    all_skill_books(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        skill {\n          required_level_land\n          required_level_sea\n          ...CharacterClassFragment\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SkillBookPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: SkillBookFilter\n    $order_by: [SkillBookSort!]\n  ) {\n    all_skill_books(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        skill {\n          required_level_land\n          required_level_sea\n          ...CharacterClassFragment\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SkillBookDetailed($code: String!) {\n    skill_book(code: $code) {\n      ...ItemBase\n      skill {\n        ...SkillsCard_Fragment\n      }\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query SkillBookDetailed($code: String!) {\n    skill_book(code: $code) {\n      ...ItemBase\n      skill {\n        ...SkillsCard_Fragment\n      }\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetFilter\n    $order_by: [PetSort!]\n  ) {\n    all_pets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n        is_unlimited\n        initial_courage\n      }\n    }\n  }\n"): (typeof documents)["\n  query PetsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetFilter\n    $order_by: [PetSort!]\n  ) {\n    all_pets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n        is_unlimited\n        initial_courage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetDetailed($code: String!) {\n    pet(code: $code) {\n      is_unlimited\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query PetDetailed($code: String!) {\n    pet(code: $code) {\n      is_unlimited\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetCombineHelpItemsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetCombineHelpFilter\n    $order_by: [PetCombineHelpSort!]\n  ) {\n    all_pet_combine_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query PetCombineHelpItemsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetCombineHelpFilter\n    $order_by: [PetCombineHelpSort!]\n  ) {\n    all_pet_combine_help_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetCombineHelpDetailed($code: String!) {\n    pet_combine_help: pet_combine_help_item(code: $code) {\n      efficiency: value\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query PetCombineHelpDetailed($code: String!) {\n    pet_combine_help: pet_combine_help_item(code: $code) {\n      efficiency: value\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetCombineStonesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetCombineStoneFilter\n    $order_by: [PetCombineStoneSort!]\n  ) {\n    all_pet_combine_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query PetCombineStonesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetCombineStoneFilter\n    $order_by: [PetCombineStoneSort!]\n  ) {\n    all_pet_combine_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetCombineStoneDetailed($code: String!) {\n    pet_combine_stone(code: $code) {\n      min_value\n      max_value\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query PetCombineStoneDetailed($code: String!) {\n    pet_combine_stone(code: $code) {\n      min_value\n      max_value\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetSkillStonesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetSkillStoneFilter\n    $order_by: [PetSkillStoneSort!]\n  ) {\n    all_pet_skill_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n        skill {\n          required_level_land\n          required_level_sea\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query PetSkillStonesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PetSkillStoneFilter\n    $order_by: [PetSkillStoneSort!]\n  ) {\n    all_pet_skill_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n        skill {\n          required_level_land\n          required_level_sea\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PetSkillStoneDetailed($code: String!) {\n    pet_skill_stone(code: $code) {\n      skill {\n        ...SkillsCard_Fragment\n      }\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query PetSkillStoneDetailed($code: String!) {\n    pet_skill_stone(code: $code) {\n      skill {\n        ...SkillsCard_Fragment\n      }\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RidingPetsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RidingPetFilter\n    $order_by: [RidingPetSort!]\n  ) {\n    all_riding_pets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n      }\n    }\n  }\n"): (typeof documents)["\n  query RidingPetsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RidingPetFilter\n    $order_by: [RidingPetSort!]\n  ) {\n    all_riding_pets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        duration\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RidingPetDetailed($code: String!) {\n    riding_pet(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query RidingPetDetailed($code: String!) {\n    riding_pet(code: $code) {\n      ...ItemBase\n      description\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QuestsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestFilter\n    $order_by: [QuestSort!]\n  ) {\n    all_quests(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        title\n        level\n        is_sea\n        is_explorer\n        is_mercenary\n        is_noble\n        is_saint\n        start_area {\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query QuestsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestFilter\n    $order_by: [QuestSort!]\n  ) {\n    all_quests(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        title\n        level\n        is_sea\n        is_explorer\n        is_mercenary\n        is_noble\n        is_saint\n        start_area {\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QuestDetailed($code: String!) {\n    quest(code: $code) {\n      code\n      title\n      is_sea\n      level\n      is_noble\n      is_saint\n      is_mercenary\n      is_explorer\n\n      start_area {\n        map_code\n        name\n      }\n      start_npc {\n        code\n        name\n      }\n      end_npc {\n        code\n        name\n      }\n\n      money\n      experience\n\n      description\n      pre_dialog\n      start_dialog\n      run_dialog\n      finish_dialog\n\n      previous_quest {\n        ...QuestsList_Fragment\n      }\n\n      selectable_items_count\n      reward_items {\n        ...QuestRewardEdge\n      }\n\n      ...QuestMissions\n    }\n\n    next_quests: all_quests(filter: {previous_quest_code: {eq: $code}}) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query QuestDetailed($code: String!) {\n    quest(code: $code) {\n      code\n      title\n      is_sea\n      level\n      is_noble\n      is_saint\n      is_mercenary\n      is_explorer\n\n      start_area {\n        map_code\n        name\n      }\n      start_npc {\n        code\n        name\n      }\n      end_npc {\n        code\n        name\n      }\n\n      money\n      experience\n\n      description\n      pre_dialog\n      start_dialog\n      run_dialog\n      finish_dialog\n\n      previous_quest {\n        ...QuestsList_Fragment\n      }\n\n      selectable_items_count\n      reward_items {\n        ...QuestRewardEdge\n      }\n\n      ...QuestMissions\n    }\n\n    next_quests: all_quests(filter: {previous_quest_code: {eq: $code}}) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QuestItemPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestItemFilter\n    $order_by: [QuestItemSort!]\n  ) {\n    all_quest_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query QuestItemPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestItemFilter\n    $order_by: [QuestItemSort!]\n  ) {\n    all_quest_items(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QuestItemDetailed($code: String!) {\n    quest_item(code: $code) {\n      ...ItemBase\n    }\n\n    quests_by_give_item: all_quests(\n      limit: -1\n      filter: {give_items: {item_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n\n    quests_by_mission: all_quests(\n      limit: -1\n      filter: {missions: {quest_item_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query QuestItemDetailed($code: String!) {\n    quest_item(code: $code) {\n      ...ItemBase\n    }\n\n    quests_by_give_item: all_quests(\n      limit: -1\n      filter: {give_items: {item_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n\n    quests_by_mission: all_quests(\n      limit: -1\n      filter: {missions: {quest_item_code: {eq: $code}}}\n    ) {\n      items {\n        ...QuestsList_Fragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QuestScrollPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestScrollFilter\n    $order_by: [QuestScrollSort!]\n  ) {\n    all_quest_scrolls(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        quest {\n          title\n          level\n          is_sea\n          is_mercenary\n          is_saint\n          is_noble\n          is_explorer\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query QuestScrollPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: QuestScrollFilter\n    $order_by: [QuestScrollSort!]\n  ) {\n    all_quest_scrolls(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n        quest {\n          title\n          level\n          is_sea\n          is_mercenary\n          is_saint\n          is_noble\n          is_explorer\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QuestScrollDetailed($code: String!) {\n    quest_scroll(code: $code) {\n      ...ItemBase\n\n      quest {\n        ...QuestsList_Fragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query QuestScrollDetailed($code: String!) {\n    quest_scroll(code: $code) {\n      ...ItemBase\n\n      quest {\n        ...QuestsList_Fragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipAnchorPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipAnchorFilter\n    $order_by: [ShipAnchorSort!]\n  ) {\n    all_ship_anchors(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipAnchorPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipAnchorFilter\n    $order_by: [ShipAnchorSort!]\n  ) {\n    all_ship_anchors(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipAnchorDetailed($code: String!) {\n    ship_anchor(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipAnchorDetailed($code: String!) {\n    ship_anchor(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipBodiesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipBodyFilter\n    $order_by: [ShipBodySort!]\n  ) {\n    all_ship_bodies(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipBodiesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipBodyFilter\n    $order_by: [ShipBodySort!]\n  ) {\n    all_ship_bodies(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipBodyDetailed($code: String!) {\n    ship_body(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipBodyDetailed($code: String!) {\n    ship_body(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipFigurePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFigureFilter\n    $order_by: [ShipFigureSort!]\n  ) {\n    all_ship_figures(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipFigurePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFigureFilter\n    $order_by: [ShipFigureSort!]\n  ) {\n    all_ship_figures(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipFigureDetailed($code: String!) {\n    ship_figure(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipFigureDetailed($code: String!) {\n    ship_figure(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipFlagPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFlagFilter\n    $order_by: [ShipFlagSort!]\n  ) {\n    all_ship_flags(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipFlagPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFlagFilter\n    $order_by: [ShipFlagSort!]\n  ) {\n    all_ship_flags(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipFlagDetailed($code: String!) {\n    ship_flag(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipFlagDetailed($code: String!) {\n    ship_flag(code: $code) {\n      ...ItemBase\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipFrontPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFrontFilter\n    $order_by: [ShipFrontSort!]\n  ) {\n    all_ship_fronts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipFrontPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipFrontFilter\n    $order_by: [ShipFrontSort!]\n  ) {\n    all_ship_fronts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipFrontDetailed($code: String!) {\n    ship_front(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipFrontDetailed($code: String!) {\n    ship_front(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipHeadMastPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipHeadMastFilter\n    $order_by: [ShipHeadMastSort!]\n  ) {\n    all_ship_head_masts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipHeadMastPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipHeadMastFilter\n    $order_by: [ShipHeadMastSort!]\n  ) {\n    all_ship_head_masts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipHeadMastDetailed($code: String!) {\n    ship_head_mast(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipHeadMastDetailed($code: String!) {\n    ship_head_mast(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipMagicStonePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipMagicStoneFilter\n    $order_by: [ShipMagicStoneSort!]\n  ) {\n    all_ship_magic_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipMagicStonePagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipMagicStoneFilter\n    $order_by: [ShipMagicStoneSort!]\n  ) {\n    all_ship_magic_stones(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipMagicStoneDetailed($code: String!) {\n    ship_magic_stone(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipMagicStoneDetailed($code: String!) {\n    ship_magic_stone(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipMainMastPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipMainMastFilter\n    $order_by: [ShipMainMastSort!]\n  ) {\n    all_ship_main_masts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipMainMastPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipMainMastFilter\n    $order_by: [ShipMainMastSort!]\n  ) {\n    all_ship_main_masts(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipMainMastDetailed($code: String!) {\n    ship_main_mast(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipMainMastDetailed($code: String!) {\n    ship_main_mast(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipNormalWeaponPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipNormalWeaponFilter\n    $order_by: [ShipNormalWeaponSort!]\n  ) {\n    all_ship_normal_weapons(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipNormalWeaponPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipNormalWeaponFilter\n    $order_by: [ShipNormalWeaponSort!]\n  ) {\n    all_ship_normal_weapons(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipNormalWeaponDetailed($code: String!) {\n    ship_normal_weapon(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipNormalWeaponDetailed($code: String!) {\n    ship_normal_weapon(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipShellPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipShellFilter\n    $order_by: [ShipShellSort!]\n  ) {\n    all_ship_shells(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipShellPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipShellFilter\n    $order_by: [ShipShellSort!]\n  ) {\n    all_ship_shells(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        code\n        name\n        icon\n        grade\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipShellDetailed($code: String!) {\n    ship_shell(code: $code) {\n      ...ItemBase\n      level_sea\n      physical_damage\n      explosion_range\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipShellDetailed($code: String!) {\n    ship_shell(code: $code) {\n      ...ItemBase\n      level_sea\n      physical_damage\n      explosion_range\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipSpecialWeaponPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipSpecialWeaponFilter\n    $order_by: [ShipSpecialWeaponSort!]\n  ) {\n    all_ship_special_weapons(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShipSpecialWeaponPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShipSpecialWeaponFilter\n    $order_by: [ShipSpecialWeaponSort!]\n  ) {\n    all_ship_special_weapons(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ShipPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShipSpecialWeaponDetailed($code: String!) {\n    ship_special_weapon(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShipSpecialWeaponDetailed($code: String!) {\n    ship_special_weapon(code: $code) {\n      ...ItemBase\n      level_sea\n\n      ...ShipDetails\n      ...ShipClassFragment\n      ...EffectsFragment\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ShipPaginationFragment on ShipBaseMixin {\n    code\n    name\n    icon\n    grade\n    level_sea\n    duration\n    ...ShipClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n"): (typeof documents)["\n  fragment ShipPaginationFragment on ShipBaseMixin {\n    code\n    name\n    icon\n    grade\n    level_sea\n    duration\n    ...ShipClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CoatsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: CoatFilter\n    $order_by: [CoatSort!]\n  ) {\n    all_coats(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query CoatsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: CoatFilter\n    $order_by: [CoatSort!]\n  ) {\n    all_coats(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CoatDetailed($code: String!) {\n    coat(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query CoatDetailed($code: String!) {\n    coat(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GauntletsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: GauntletFilter\n    $order_by: [GauntletSort!]\n  ) {\n    all_gauntlets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query GauntletsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: GauntletFilter\n    $order_by: [GauntletSort!]\n  ) {\n    all_gauntlets(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GauntletDetailed($code: String!) {\n    gauntlet: gauntlets(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query GauntletDetailed($code: String!) {\n    gauntlet: gauntlets(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PantsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PantsFilter\n    $order_by: [PantsSort!]\n  ) {\n    all_pants(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query PantsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: PantsFilter\n    $order_by: [PantsSort!]\n  ) {\n    all_pants(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PantsDetailed($code: String!) {\n    pants(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query PantsDetailed($code: String!) {\n    pants(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShieldsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShieldFilter\n    $order_by: [ShieldSort!]\n  ) {\n    all_shields(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShieldsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShieldFilter\n    $order_by: [ShieldSort!]\n  ) {\n    all_shields(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShieldDetailed($code: String!) {\n    shield(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShieldDetailed($code: String!) {\n    shield(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShoesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShoesFilter\n    $order_by: [ShoesSort!]\n  ) {\n    all_shoes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query ShoesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: ShoesFilter\n    $order_by: [ShoesSort!]\n  ) {\n    all_shoes(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...ArmorPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ShoesDetailed($code: String!) {\n    shoes(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query ShoesDetailed($code: String!) {\n    shoes(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      physical_defense\n      magical_defense\n      upgrade_rule {\n        ...UpgradeRule\n      }\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CariadsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: CariadFilter\n    $order_by: [CariadSort!]\n  ) {\n    all_cariads(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query CariadsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: CariadFilter\n    $order_by: [CariadSort!]\n  ) {\n    all_cariads(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CariadDetailed($code: String!) {\n    cariad(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query CariadDetailed($code: String!) {\n    cariad(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DaggersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DaggerFilter\n    $order_by: [DaggerSort!]\n  ) {\n    all_daggers(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query DaggersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DaggerFilter\n    $order_by: [DaggerSort!]\n  ) {\n    all_daggers(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DaggerDetailed($code: String!) {\n    dagger(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query DaggerDetailed($code: String!) {\n    dagger(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DualssPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DualsFilter\n    $order_by: [DualsSort!]\n  ) {\n    all_duals(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query DualssPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: DualsFilter\n    $order_by: [DualsSort!]\n  ) {\n    all_duals(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DualsDetailed($code: String!) {\n    duals(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query DualsDetailed($code: String!) {\n    duals(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FishingRodsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingRodFilter\n    $order_by: [FishingRodSort!]\n  ) {\n    all_fishing_rods(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query FishingRodsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: FishingRodFilter\n    $order_by: [FishingRodSort!]\n  ) {\n    all_fishing_rods(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FishingRodDetailed($code: String!) {\n    fishing_rod(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query FishingRodDetailed($code: String!) {\n    fishing_rod(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...EffectsFragment\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OneHandedSwordsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: OneHandedSwordFilter\n    $order_by: [OneHandedSwordSort!]\n  ) {\n    all_one_handed_swords(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query OneHandedSwordsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: OneHandedSwordFilter\n    $order_by: [OneHandedSwordSort!]\n  ) {\n    all_one_handed_swords(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OneHandedSwordDetailed($code: String!) {\n    one_handed_sword(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query OneHandedSwordDetailed($code: String!) {\n    one_handed_sword(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RapiersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RapierFilter\n    $order_by: [RapierSort!]\n  ) {\n    all_rapiers(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query RapiersPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RapierFilter\n    $order_by: [RapierSort!]\n  ) {\n    all_rapiers(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RapierDetailed($code: String!) {\n    rapier(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query RapierDetailed($code: String!) {\n    rapier(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RiflesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RifleFilter\n    $order_by: [RifleSort!]\n  ) {\n    all_rifles(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query RiflesPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: RifleFilter\n    $order_by: [RifleSort!]\n  ) {\n    all_rifles(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RifleDetailed($code: String!) {\n    rifle(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query RifleDetailed($code: String!) {\n    rifle(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TwoHandedSwordsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: TwoHandedSwordFilter\n    $order_by: [TwoHandedSwordSort!]\n  ) {\n    all_two_handed_swords(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query TwoHandedSwordsPagination(\n    $offset: Int!\n    $limit: Int!\n    $filter: TwoHandedSwordFilter\n    $order_by: [TwoHandedSwordSort!]\n  ) {\n    all_two_handed_swords(\n      offset: $offset\n      limit: $limit\n      filter: $filter\n      order_by: $order_by\n    ) {\n      total_count\n      items {\n        ...WeaponPaginationFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TwoHandedSwordDetailed($code: String!) {\n    two_handed_sword(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"): (typeof documents)["\n  query TwoHandedSwordDetailed($code: String!) {\n    two_handed_sword(code: $code) {\n      ...ItemBase\n\n      level_land\n      level_sea\n\n      ...ItemSetCard\n      ...CharacterClassFragment\n      ...WeaponUpgradeRule\n      ...EffectsFragment\n\n      minimum_physical_damage\n      maximum_physical_damage\n      minimum_magical_damage\n      maximum_magical_damage\n      attack_speed\n      attack_range\n\n      models {\n        ...ModelFragment\n      }\n    }\n\n    dropped_by(code: $code) {\n      ...DroppedBy\n    }\n\n    available_in_randombox(code: $code) {\n      ...RandomBox\n    }\n\n    produced_by(code: $code) {\n      ...ProducedBy\n    }\n\n    needed_for(code: $code) {\n      ...NeededFor\n    }\n\n    sold_by_npc(code: $code) {\n      ...SoldByNPC\n    }\n\n    available_as_quest_reward(code: $code) {\n      ...QuestsList_Fragment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment WeaponPaginationFragment on WeaponMixin {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n    duration\n    ...CharacterClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n"): (typeof documents)["\n  fragment WeaponPaginationFragment on WeaponMixin {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n    duration\n    ...CharacterClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArmorPaginationFragment on ArmorMixin {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n    duration\n    ...CharacterClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n"): (typeof documents)["\n  fragment ArmorPaginationFragment on ArmorMixin {\n    code\n    name\n    icon\n    grade\n    level_land\n    level_sea\n    duration\n    ...CharacterClassFragment\n    effects {\n      effect_code\n      operator\n      value\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MapDetailed($code: String!) {\n    map(code: $code) {\n      ...MapCanvas_MapDetailsFragment\n\n      monsters {\n        ...MapCanvas_MonsterPositionFragment\n      }\n\n      npcs {\n        ...MapCanvas_NPCPositionFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  query MapDetailed($code: String!) {\n    map(code: $code) {\n      ...MapCanvas_MapDetailsFragment\n\n      monsters {\n        ...MapCanvas_MonsterPositionFragment\n      }\n\n      npcs {\n        ...MapCanvas_NPCPositionFragment\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TowerFloors {\n    all_tower_floors(limit: -1) {\n      items {\n        floor_number\n        time\n        monsters {\n          amount\n          monster {\n            code\n            name\n            icon\n            level\n            grade\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TowerFloors {\n    all_tower_floors(limit: -1) {\n      items {\n        floor_number\n        time\n        monsters {\n          amount\n          monster {\n            code\n            name\n            icon\n            level\n            grade\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PlannerData($codes: [String!]!, $class: BaseClassType!) {\n    all_player_skills(limit: -1, filter: {reference_code: {in: $codes}}) {\n      skills: items {\n        ...PlannerPlayerSkill\n      }\n    }\n\n    player_level_stats(base_class: $class) {\n      ...PlayerLevelData\n    }\n\n    player_stats(base_class: $class) {\n      ...PlayerStatsData\n    }\n  }\n"): (typeof documents)["\n  query PlannerData($codes: [String!]!, $class: BaseClassType!) {\n    all_player_skills(limit: -1, filter: {reference_code: {in: $codes}}) {\n      skills: items {\n        ...PlannerPlayerSkill\n      }\n    }\n\n    player_level_stats(base_class: $class) {\n      ...PlayerLevelData\n    }\n\n    player_stats(base_class: $class) {\n      ...PlayerStatsData\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;